# -*- coding: utf-8 -*-
"""Untitled26.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1cWFtAFOXtrvuZwYlqoTsGrryhMcT050q
"""

#!pip install openai streamlit
import streamlit as st
from datetime import date, timedelta
import sqlite3
import openai

# =========================
# إعداد مفتاح OpenAI API من Streamlit Secrets
# =========================
try:
    openai.api_key = st.secrets["OPENAI_API_KEY"]
except KeyError:
    st.error("⚠️ مفتاح OpenAI API غير موجود. الرجاء إضافته في Streamlit Secrets باسم 'OPENAI_API_KEY'.")
    st.stop()

# =========================
# إعداد الصفحة
# =========================
st.set_page_config(
    page_title="المنظم الأكاديمي الذكي",
    layout="wide",
    initial_sidebar_state="collapsed"
)

# =========================
# قاعدة بيانات تجريبية في الذاكرة
# =========================
def init_db():
    conn = sqlite3.connect(":memory:")
    cur = conn.cursor()
    cur.executescript("""
    CREATE TABLE Students (
        StudentID INTEGER PRIMARY KEY AUTOINCREMENT,
        Username TEXT UNIQUE,
        Password TEXT,
        FullName TEXT,
        Department TEXT
    );
    CREATE TABLE Schedules (
        ScheduleID INTEGER PRIMARY KEY AUTOINCREMENT,
        StudentID INTEGER,
        Day TEXT,
        StartTime TEXT,
        EndTime TEXT,
        Subject TEXT,
        Room TEXT
    );
    CREATE TABLE Tasks (
        TaskID INTEGER PRIMARY KEY AUTOINCREMENT,
        StudentID INTEGER,
        Title TEXT,
        DueDate TEXT,
        EstHours REAL,
        Priority TEXT,
        Done INTEGER DEFAULT 0
    );
    """)
    return conn, cur

def seed_demo(cur):
    cur.execute("INSERT INTO Students (Username, Password, FullName, Department) VALUES (?,?,?,?)",
                ("ahmed","1234","أحمد محمد","علوم الحاسوب"))
    today = date.today()
    cur.executemany("INSERT INTO Schedules (StudentID, Day, StartTime, EndTime, Subject, Room) VALUES (?,?,?,?,?,?)", [
        (1,"الأحد","09:00","11:00","برمجة","A101"),
        (1,"الاثنين","10:00","12:00","رياضيات","B201"),
        (1,"الثلاثاء","11:00","13:00","ذكاء اصطناعي","A102"),
        (1,"الأربعاء","09:00","11:00","فيزياء","C101"),
        (1,"الخميس","10:00","12:00","نظم تشغيل","C301")
    ])
    cur.executemany("INSERT INTO Tasks (StudentID, Title, DueDate, EstHours, Priority) VALUES (?,?,?,?,?)", [
        (1,"مشروع بايثون","%s"%(today + timedelta(days=3)),6.0,"High"),
        (1,"واجب رياضيات","%s"%(today + timedelta(days=1)),2.0,"Medium"),
        (1,"مراجعة الذكاء الاصطناعي","%s"%(today + timedelta(days=7)),4.0,"Low"),
        (1,"تجهيز مختبر الفيزياء","%s"%(today + timedelta(days=2)),3.0,"High")
    ])

# =========================
# دوال مساعدة
# =========================
def authenticate(cur, username, password):
    cur.execute("SELECT StudentID, FullName, Department FROM Students WHERE Username=? AND Password=?", (username, password))
    return cur.fetchone()

def fetch_schedule(cur, student_id):
    cur.execute("SELECT ScheduleID, Day, StartTime, EndTime, Subject, Room FROM Schedules WHERE StudentID=? ORDER BY Day, StartTime", (student_id,))
    return cur.fetchall()

def fetch_tasks(cur, student_id):
    cur.execute("SELECT TaskID, Title, DueDate, EstHours, Priority, Done FROM Tasks WHERE StudentID=? ORDER BY DueDate", (student_id,))
    return cur.fetchall()

def update_task_done(cur, task_id):
    cur.execute("UPDATE Tasks SET Done=1 WHERE TaskID=?", (task_id,))

def get_upcoming_tasks(tasks, days=3):
    now = date.today()
    return [t for t in tasks if not t[5] and now <= date.fromisoformat(t[2]) <= now+timedelta(days=days)]

def get_overdue_tasks(tasks):
    now = date.today()
    return [t for t in tasks if not t[5] and date.fromisoformat(t[2]) < now]

def summarize_week(schedule, tasks):
    today = date.today()
    week_end = today + timedelta(days=7)
    week_tasks = [t for t in tasks if today <= date.fromisoformat(t[2]) <= week_end and not t[5]]
    return week_tasks, schedule

def plan_study(tasks):
    plan = sorted([t for t in tasks if not t[5]], key=lambda x: (x[4], x[2]))
    return plan

def ask_gpt(prompt):
    # استدعاء GPT بالواجهة الجديدة
    response = openai.chat.completions.create(
        model="gpt-4",
        messages=[{"role":"user","content":prompt}],
        temperature=0.5
    )
    return response.choices[0].message.content

# =========================
# التطبيق الرئيسي
# =========================
def main():
    st.title("📘 المنظم الأكاديمي الذكي")

    if "db_init" not in st.session_state:
        conn, cur = init_db()
        seed_demo(cur)
        conn.commit()
        st.session_state.conn = conn
        st.session_state.cur = cur
        st.session_state.db_init = True

    cur = st.session_state.cur

    # تسجيل دخول الطالب
    if "student" not in st.session_state:
        with st.form("login_form"):
            username = st.text_input("👤 اسم المستخدم")
            password = st.text_input("🔑 كلمة المرور", type="password")
            submit = st.form_submit_button("دخول")
            if submit:
                auth = authenticate(cur, username, password)
                if auth:
                    st.session_state.student = {
                        "id": auth[0],
                        "name": auth[1],
                        "dept": auth[2]
                    }
                    st.success(f"مرحباً {auth[1]} 👋")
                else:
                    st.error("❌ بيانات الدخول غير صحيحة")
        return

    student_id = st.session_state.student["id"]
    st.subheader(f"مرحبا {st.session_state.student['name']} — {st.session_state.student['dept']}")

    # زر تحديث الإشعارات والملخص
    if st.button("🔄 تحديث الإشعارات والملخص"):
        schedule = fetch_schedule(cur, student_id)
        tasks = fetch_tasks(cur, student_id)

        # إشعارات ذكية
        st.write("### 📢 إشعارات اليوم")
        today = date.today()
        today_tasks = [t for t in tasks if date.fromisoformat(t[2]) == today and not t[5]]
        overdue = get_overdue_tasks(tasks)
        upcoming = get_upcoming_tasks(tasks)

        if overdue:
            for t in overdue:
                st.error(f"❌ مهمة متأخرة: {t[1]} (تسليم: {t[2]})")
        if upcoming:
            for t in upcoming:
                st.warning(f"⚠️ مهمة قريبة: {t[1]} (تسليم: {t[2]})")
        if today_tasks:
            st.info("📌 مهام اليوم:")
            for t in today_tasks:
                st.write(f"- {t[1]} (تسليم: {t[2]})")
        if not overdue and not upcoming and not today_tasks:
            st.success("✅ لا توجد مهام عاجلة اليوم")

        # ملخص أسبوعي
        week_tasks, week_schedule = summarize_week(schedule, tasks)
        st.write("### 📊 ملخص أسبوعي")
        st.table(week_tasks)

        # خطة دراسة ذكية
        study_plan = plan_study(tasks)
        st.write("### 🧠 خطة الدراسة المقترحة")
        st.table(study_plan)

        # تمييز المهام كمكتملة
        st.write("### ✅ تحديد المهام كمكتملة")
        for t in tasks:
            if not t[5]:
                if st.button(f"تم إنجاز: {t[1]}", key=t[0]):
                    update_task_done(cur, t[0])
                    st.success(f"تم تحديث المهمة: {t[1]}")

    # شات GPT تفاعلي
    st.write("### 🤖 مساعد ذكي")
    user_question = st.text_input("اكتب سؤالك (مثال: ماذا لدي هذا الأسبوع؟)")
    if user_question:
        schedule = fetch_schedule(cur, student_id)
        tasks = fetch_tasks(cur, student_id)
        study_plan = plan_study(tasks)
        data_summary = f"جدول الطالب: {schedule}\nمهام الطالب: {tasks}\nخطة الدراسة: {study_plan}"
        prompt = f"الطالب سأل: '{user_question}'\nهذه بيانات الطالب: {data_summary}\nأجب بطريقة مفهومة ولطيفة."
        answer = ask_gpt(prompt)
        st.info(answer)

if __name__ == "__main__":
    main()
